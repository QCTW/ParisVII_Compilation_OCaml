* Exemple sans non terminal annulable
A -> { B }
B -> x : A B | C
C -> !

FIRST (A) = {
FIRST (B) = x !
FIRST (C) = !

FIRST (A B) = {
FIRST (x B) = x

|---+-------+---------+---+---+---|
|   | {     | x       | ! | } | : |
|---+-------+---------+---+---+---|
| A | { B } | ⊥       | ⊥ | ⊥ | ⊥ |
|---+-------+---------+---+---+---|
| B | ⊥     | x : A B | C | ⊥ | ⊥ |
|---+-------+---------+---+---+---|
| C | ⊥     | ⊥       | ! | ⊥ | ⊥ |
|---+-------+---------+---+---+---|

** Parseur récursif descendant

let rec parseA () =
  if next () = '{' then begin
     accept '{';
     parseB ();
     accept '}'
  end else syntax_error ()
and parseB () =
  match next () with
  | 'x' -> accept 'x'; accept ':'; parseA (); parseB ()
  | '!' -> parseC ()
  | _ -> syntax_error ()
and parseC () =
  accept '!'

* Exemple avec non terminal annulable
A -> { B }
B -> x : A B | ε

FIRST (A) = {
FIRST (B) = x

B est annulable. A n'est pas annulable.

FOLLOW (A) = x
FOLLOW (B) = }

|---+-------+---------+---+---|
|   | {     | x       | } | : |
|---+-------+---------+---+---|
| A | { B } | ⊥       | ⊥ | ⊥ |
|---+-------+---------+---+---|
| B | ⊥     | x : A B | ε | ⊥ |
|---+-------+---------+---+---|

** Parseur récursif descendant

let rec parseA () =
  if next () = '{' then begin
     accept '{';
     parseB ();
     accept '}'
  end else syntax_error ()
and parseB () =
  match next () with
  | 'x' -> accept 'x'; accept ':'; parseA (); parseB ()
  | '}' -> ()
  | _ -> syntax_error ()
* Exemple de calcul de FIRST sans non terminal annulable

A := B | a | C a
C := c | A
B := d | B

FIRST₀ (A) = ∅
FIRST₀ (a) = { a }
FIRST₀ (C a) = FIRST₀ (C) = ∅
FIRST₀ (B) = ∅
FIRST₀ (d) = { d }
FIRST₀ (C) = ∅
FIRST₀ (c) = { c }

FIRST₁ (A) = { a }
FIRST₁ (B) = { d }
FIRST₁ (C) = { c }

FIRST₂ (A) = FIRST₁(A) ∪ FIRST₁ (B) ∪ FIRST₁(C a)
           = { a } ∪ { d } ∪ { c } = { a d c }
FIRST₂ (B) = FIRST₁(B) ∪ FIRST₁(B) = { d }
FIRST₂ (C) = FIRST₁(C) ∪ FIRST₁(A)
           = { c } ∪ { a }

FIRST₃ (A) = { a d c }
FIRST₃ (B) = { d }
FIRST₃ (C) = { c } ∪ { a d c } = { a d c }

* Exemple de calcul de FIRST avec non terminal annulable

A := B | a | C a
C := c | A
B := d | B

FIRST₀ (A) = ∅
FIRST₀ (a) = { a }
FIRST₀ (C a) = FIRST₀ (C) = ∅
FIRST₀ (B) = ∅
FIRST₀ (d) = { d }
FIRST₀ (C) = ∅
FIRST₀ (c) = { c }

FIRST₁ (A) = { a }
FIRST₁ (B) = { d }
FIRST₁ (C) = { c }

FIRST₂ (A) = FIRST₁(A) ∪ FIRST₁ (B) ∪ FIRST₁(C a)
           = { a } ∪ { d } ∪ { c } = { a d c }
FIRST₂ (B) = FIRST₁(B) ∪ FIRST₁(B) = { d }
FIRST₂ (C) = FIRST₁(C) ∪ FIRST₁(A)
           = { c } ∪ { a }

FIRST₃ (A) = { a d c }
FIRST₃ (B) = { d }
FIRST₃ (C) = { c } ∪ { a d c } = { a d c }

A := a | B b
B := c | ε

ANNULABLE (B) = ⊤
ANNULABLE (A) = ⊥

FIRST (A) = { a } ∪ FIRST (B b)
FIRST (B b) = { c } ∪ FIRST (b) = { b c }
FIRST (B) = { c }

FOLLOW (A) = ∅
FOLLOW (B) = { b }

* Exemple plus compliqué

A := a | B b | c B C
B := a | A d
C := ε

FOLLOW (A) = { d }
FOLLOW (B) = { b d }

A -> B b -> A d b -> c B d b
