make: Entering directory '/home/opam/source/flap/tests-m2'
make -C ..
make[1]: Entering directory '/home/opam/source/flap'
Source configuration ...
 * Ledit is not present: use default UserInput.
rm -f flap.native
make[1]: Leaving directory '/home/opam/source/flap'
make[1]: Entering directory '/home/opam/source/flap/tests-m2/hopix/interpreter/bad'
========================================================
In interpreter/bad
GOOD: 0 / 0

BAD:  0 / 0
make[1]: Leaving directory '/home/opam/source/flap/tests-m2/hopix/interpreter/bad'
make[1]: Entering directory '/home/opam/source/flap/tests-m2/hopix/interpreter/good'
========================================================
In interpreter/good
[ OK ]   adt.hopix

INPUT:
val nil = Nil
val l1 = Cons (1, Cons (2, nil))
val l2 = Cons (0, l1)
val main =
  l2 ? {
  | Nil => print_string ("Wrong!\n")
  | Cons (x, _) => print_int (x)
  };
  print_string ("!\n")
OUTPUT: 
0!
EXPECTED: 
0!
--------------------------------------------------------
[ OK ]   adt1.hopix

INPUT:
val nil = Nil
val l1 = Cons (1, Cons (2, nil))
val l2 = Cons (0, l1)
val main =
  l2 ? {
  | Nil => print_string ("Wrong!\n")
  | Cons (x, xs) =>
    xs ? {
    | Nil => print_string ("Wrong!\n")
    | Cons (y, _) => print_int (y)
    }
  };
  print_string ("!\n")
OUTPUT: 
1!
EXPECTED: 
1!
--------------------------------------------------------
[ OK ]   adt2.hopix

INPUT:
val nil = Nil
val l1 = Cons (1, Cons (2, nil))
val l2 = Cons (0, l1)
fun len (l) = l ? { Nil => 0 | Cons (_, xs) => 1 + len (xs) }

val main =
  print_int (len (l1));
  print_string ("!\n")
OUTPUT: 
2!
EXPECTED: 
2!
--------------------------------------------------------
[ OK ]   adt3.hopix

INPUT:
val nil = Nil
val l1 = Cons (1, Cons (2, nil))
val l2 = Cons (0, l1)
fun len (l) = l ? { Nil => 0 | Cons (_, xs) => 1 + len (xs) }
fun fold (l, f, accu) = l ? { Nil => accu | Cons (x, xs) => f (x, fold (xs, f, accu)) }
fun add (x, y) = x + y

val main =
  print_int (fold (l2, add, 0));
  print_string ("!\n")
OUTPUT: 
3!
EXPECTED: 
3!
--------------------------------------------------------
[ OK ]   adtref.hopix

INPUT:
val n = ref Nil
val l = Cons (1, ref (Cons (2, n)))
val make_cycle = (n := l)

fun take (n, l) =
  if n = 0 then 0 else l ? {
  | Nil => 0
  | Cons (x, lr) => x + take (n - 1, !lr)
  }

val main =
  print_int (take (10, l));
  print_string ("!\n")

OUTPUT: 
15!
EXPECTED: 
15!
--------------------------------------------------------
[ OK ]   adtref1.hopix

INPUT:
val n = ref Nil
val l = Cons (1, ref (Cons (2, n)))
val make_cycle = (n := l)

fun take (n, l) =
  if n = 0 then 0 else l ? {
  | Nil => 0
  | Cons (x, lr) => (
      lr := l;
      x + take (n - 1, !lr)
    )
  }

val main =
  print_int (take (10, l));
  print_string ("!\n")

OUTPUT: 
10!
EXPECTED: 
10!
--------------------------------------------------------
[ OK ]   adtref2.hopix

INPUT:
fun leaf (x) = Leaf (ref x)
fun node (l, r) = Node (l, r)
fun sum (t) = t ? {
  | Leaf (r) => !r
  | Node (l, r) => sum (l) + sum (r)
  }

val main =
  print_int (sum (node (node (leaf (1), leaf (2)), leaf (3))));
  print_string ("!\n")
OUTPUT: 
6!
EXPECTED: 
6!
--------------------------------------------------------
[ OK ]   adtref3.hopix

INPUT:
fun leaf (x) = Leaf (ref x)
fun node (l, r) = Node (l, r)
fun sum (t) = t ? {
  | Leaf (r) => !r
  | Node (l, r) => sum (l) + sum (r)
  }

val c = ref 0
val t = node (node (Leaf (c), leaf (2)), leaf (3))

val main =
  print_int (sum (t));
  print_string ("!\n");
  c := sum (t);
  print_int (sum (t));
  print_string ("!\n")
OUTPUT: 
5!
10!
EXPECTED: 
5!
10!
--------------------------------------------------------
[ OK ]   adtref4.hopix

INPUT:
fun leaf (x) = Leaf (ref x)
fun node (l, r) = Node (l, r)
fun sum (t) = t ? {
  | Leaf (r) => !r
  | Node (l, r) => sum (l) + sum (r)
  }

val c = ref 0
val t = node (node (Leaf (c), leaf (2)), leaf (3))

val main =
  val i = ref 10;
  while (!i > 0) {
    print_int (sum (t));
    print_string ("!\n");
    c := sum (t);
    i := !i - 1
  }

OUTPUT: 
5!
10!
15!
20!
25!
30!
35!
40!
45!
50!
EXPECTED: 
5!
10!
15!
20!
25!
30!
35!
40!
45!
50!
--------------------------------------------------------
[ OK ]   adtref5.hopix

INPUT:
fun leaf (x) = Leaf (ref x)
fun node (l, r) = Node (l, r)
fun sum (t) = t ? {
  | Leaf (r) => !r
  | Node (l, r) => sum (l) + sum (r)
  }

val c = ref 0
val t = node (node (Leaf (c), leaf (2)), Leaf (c))

val main =
  val i = ref 10;
  while (!i > 0) {
    print_int (sum (t));
    print_string ("!\n");
    c := sum (t);
    i := !i - 1
  }

OUTPUT: 
2!
6!
14!
30!
62!
126!
254!
510!
1022!
2046!
EXPECTED: 
2!
6!
14!
30!
62!
126!
254!
510!
1022!
2046!
--------------------------------------------------------
[ OK ]   adtref6.hopix

INPUT:
fun leaf (x) = Leaf (ref x)
fun node (l, r) = Node (l, r)
fun sum (t) = t ? {
  | Leaf (r) => (r := !r + 1; !r)
  | Node (l, r) => sum (l) + sum (r)
  }

val c = ref 0
val t = node (node (Leaf (c), leaf (1)), Leaf (c))

val main =
  val i = ref 10;
  while (!i > 0) {
    print_int (sum (t));
    print_string ("!\n");
    c := sum (t);
    i := !i - 1
  }

OUTPUT: 
5!
27!
73!
167!
357!
739!
1505!
3039!
6109!
12251!
EXPECTED: 
5!
27!
73!
167!
357!
739!
1505!
3039!
6109!
12251!
--------------------------------------------------------
[ OK ]   adtref7.hopix

INPUT:
fun node (l, x, r) = Node (ref l, x, ref r)
fun sum (n, t) =
  if n < 0 then 0 else t ? {
  | Node (l, x, r) => sum (n - 1, !l) + x + sum (n - 1, !r)
  }

val u = ref 0
val t = Node (u, 1, u)
val cycle = (u := t)

val main =
  print_int (sum (10, t));
  print_string ("!\n")


OUTPUT: 
2047!
EXPECTED: 
2047!
--------------------------------------------------------
[ OK ]   arith.hopix

INPUT:
val x = 21
val y = 10 + 1
val z = x + y / 2
val t = x - y / 2
val main =
  print_int (t + z);
  print_string ("!\n")
OUTPUT: 
42!
EXPECTED: 
42!
--------------------------------------------------------
[ OK ]   arith1.hopix

INPUT:
val x = 21
val y = 10 + 1
val z = (x + y) * (x + y)
val t = x * x + 2 * x * y + y * y
val main =
  print_int (t - z);
  print_string ("!\n")
OUTPUT: 
0!
EXPECTED: 
0!
--------------------------------------------------------
[ OK ]   arith2.hopix

INPUT:
fun zero (x, y) =
 val z = (x + y) * (x + y);
 val t = x * x + 2 * x * y + y * y;
 z - t

val main =
  print_int (zero (4, 0));
  print_string ("!\n")
OUTPUT: 
0!
EXPECTED: 
0!
--------------------------------------------------------
[ OK ]   arith3.hopix

INPUT:
fun zero (x, y) =
 (x + y) * (x + y) - x * x + 2 * x * y + y * y

val main =
  print_int (zero (4, 0));
  print_string ("!\n")
OUTPUT: 
0!
EXPECTED: 
0!
--------------------------------------------------------
[ OK ]   cps.hopix

INPUT:
fun return (x) = \(k) => x
fun bind (m, f) = \(k) => m (\(v) => f (v) (k))
fun run (m) = m (\(x) => x)

fun callcc (f) = \(k) => f (k) (k)

fun throw (x, y) = \(k) => x (y)

fun id (x) =
  bind (return (x), \(x) => return (x))

val main =
   print_int (run (id (42)))

OUTPUT: 
42EXPECTED: 
42--------------------------------------------------------
[ OK ]   curry.hopix

INPUT:
fun curry2 (f) = \(x, y) => f (x) (y)

fun uncurry2 (f) = \(x) => \(y) => f (x, y)

fun add (x, y) = x + y

val main =
  print_int ((uncurry2 (add) (1)) (2));
  print_string ("!\n")
OUTPUT: 
3!
EXPECTED: 
3!
--------------------------------------------------------
[ OK ]   curry1.hopix

INPUT:
fun curry2 (f) = \(x, y) => f (x) (y)

fun uncurry2 (f) = \(x) => \(y) => f (x, y)

fun add (x, y) = x + y

val main =
  print_int (curry2 (uncurry2 (add)) (1, 2));
  print_string ("!\n")
OUTPUT: 
3!
EXPECTED: 
3!
--------------------------------------------------------
[ OK ]   helloworld.hopix

INPUT:
val main = print_string ("Hello world!\n")
OUTPUT: 
Hello world!
EXPECTED: 
Hello world!
--------------------------------------------------------
[ OK ]   if0.hopix

INPUT:
val main =
  if 0 = 0 then print_string ("Foo\n") else print_string ("Bar\n")
OUTPUT: 
Foo
EXPECTED: 
Foo
--------------------------------------------------------
[ OK ]   if1.hopix

INPUT:
val main =
  if 1 = 0 then print_string ("Foo\n") else print_string ("Bar\n")
OUTPUT: 
Bar
EXPECTED: 
Bar
--------------------------------------------------------
[ OK ]   if3.hopix

INPUT:
val main =
  if 1 = 0 then print_string ("Foo\n");
  print_string ("Bar\n")
OUTPUT: 
Bar
EXPECTED: 
Bar
--------------------------------------------------------
[ OK ]   if4.hopix

INPUT:
val main =
  if 0 = 0 then print_string ("Foo\n");
  print_string ("Bar\n")
OUTPUT: 
Foo
Bar
EXPECTED: 
Foo
Bar
--------------------------------------------------------
[ OK ]   if5.hopix

INPUT:
val main =
  if 0 = 0 then
    if 1 = 0 then print_string ("Foo\n") else print_string ("Baz\n")
  else
    print_string ("Bar\n")
OUTPUT: 
Baz
EXPECTED: 
Baz
--------------------------------------------------------
[ OK ]   ignoretypes.hopix

INPUT:
type t = T

val x = 10

val main = print_string ("OK!\n")
OUTPUT: 
OK!
EXPECTED: 
OK!
--------------------------------------------------------
[ OK ]   ignoretypes0.hopix

INPUT:
type t = T

val x = (T : t)

val main = print_string ("OK!\n")
OUTPUT: 
OK!
EXPECTED: 
OK!
--------------------------------------------------------
[ OK ]   ignoretypes1.hopix

INPUT:
type t = T

val x = (T : t)

fun f (x : int, y : int) : int = x

val z = f (x, x)

val main = print_string ("OK!\n")
OUTPUT: 
OK!
EXPECTED: 
OK!
--------------------------------------------------------
[ OK ]   ignoretypes2.hopix

INPUT:
type t = T

val x = (T : t)

fun f ['a] (x : 'a, y : 'a) : 'a = x

val z = f [int] (x, x)

val main = print_string ("OK!\n")
OUTPUT: 
OK!
EXPECTED: 
OK!
--------------------------------------------------------
[ OK ]   ignoretypes3.hopix

INPUT:
type t = T

val x = (T : t)

val f = \['a] (x : 'a, y : 'a) => (x : 'a)

val z = f [int] (x, x)

val main = print_string ("OK!\n")
OUTPUT: 
OK!
EXPECTED: 
OK!
--------------------------------------------------------
[ OK ]   lambda.hopix

INPUT:
fun f (x) = 2 * x

val main =
  print_int (f (21));
  print_string ("!\n")
OUTPUT: 
42!
EXPECTED: 
42!
--------------------------------------------------------
[ OK ]   lambda1.hopix

INPUT:
val main =
  print_int ((\(x) => 2 * x) (21));
  print_string ("!\n")
OUTPUT: 
42!
EXPECTED: 
42!
--------------------------------------------------------
[ OK ]   lambda2.hopix

INPUT:
fun apply (f, x) = f (x)

val main =
  print_int (apply ((\(x) => 2 * x), 21));
  print_string ("!\n")
OUTPUT: 
42!
EXPECTED: 
42!
--------------------------------------------------------
[ OK ]   lambda3.hopix

INPUT:
val main =
  print_int (((\(f, x) => f (x)) ((\(x) => 2 * x), 21)));
  print_string ("!\n")
OUTPUT: 
42!
EXPECTED: 
42!
--------------------------------------------------------
[ OK ]   lambda4.hopix

INPUT:
fun compose (f, g) = \(x) => f (g (x))

val main =
  print_int ((compose (\(x) => 2 * x, \(x) => x + 1)) (21));
  print_string ("!\n")
OUTPUT: 
44!
EXPECTED: 
44!
--------------------------------------------------------
[ OK ]   lambda5.hopix

INPUT:
fun choice (x, y) = x
fun compose2 (f, g, h) = \(x, y) => f (g (x), h (y))
fun succ (x) = x + 1
fun double (x) = 2 * x

val main =
  print_int ((compose2 (choice, succ, double)) (21, 10));
  print_string ("!\n")
OUTPUT: 
22!
EXPECTED: 
22!
--------------------------------------------------------
[ OK ]   option.hopix

INPUT:
fun some (x) =
  Some (x)

val none =
  None

fun return (x) =
  Some (x)

fun bind (m, f) =
  m ? { None => None | Some (x) => f (x) }

fun fail (x) =
  none

fun try_catch (m, on_error) =
  m ? { None => on_error (0) | Some (x) => return (x) }

fun div (m, n) =
  if n = 0 then fail (0) else return (m / n)

fun print_div (m, n) =
  try_catch (
    bind (div (m, n), \(r) => (
      print_int (r);
      print_string ("!\n");
      return (0))
    ), \(x) =>
    print_string ("Error!\n")
  )

val main =
  print_div (3, 2);
  print_div (3, 0)


OUTPUT: 
1!
Error!
EXPECTED: 
1!
Error!
--------------------------------------------------------
[ OK ]   pair.hopix

INPUT:
fun mk_pair (x, y) = Pair (x, y)

fun fst (p) = p ? Pair (x, y) => x

fun snd (p) = p ? Pair (x, y) => y

fun map (f, g, p) = p ? Pair (x, y) => Pair (f (x), g (y))

fun id (p) = Pair (fst (p), snd (p))

fun print_pair (p) =
  print_string ("(");
  print_int (fst (p));
  print_string (", ");
  print_int (snd (p));
  print_string (")")

fun scalar (x) = \(y) => x * y

val main =
  print_pair (map (scalar (2), scalar (3), id (Pair (3, 4))));
  print_string ("!\n")
OUTPUT: 
(6, 12)!
EXPECTED: 
(6, 12)!
--------------------------------------------------------
[ OK ]   pair1.hopix

INPUT:
fun mk_pair (x, y) = Pair (x, y)

fun fst (p) = p ? Pair (x, y) => x

fun snd (p) = p ? Pair (x, y) => y

fun map (f, g, p) = p ? Pair (x, y) => Pair (f (x), g (y))

fun id (p) = Pair (fst (p), snd (p))

fun print_pair (p) =
  print_string ("(");
  print_int (fst (p));
  print_string (", ");
  print_int (snd (p));
  print_string (")")

fun scalar (x) = \(y) => x * y

fun fib (n, p) =
  if n = 0 then p else fib (n - 1, mk_pair (snd (p), fst (p) + snd (p)))

val main =
  print_pair (fib (10, mk_pair (1, 1)));
  print_string ("!\n")
OUTPUT: 
(89, 144)!
EXPECTED: 
(89, 144)!
--------------------------------------------------------
[ OK ]   pattern0.hopix

INPUT:
val a = A
val b1 = B (1)
val c12 = C (1, 2)
val dab = D (a, b1)

val main =
  a ? {
  | A => print_string ("A!\n")
  | _ => print_string ("something else!\n")
  }
OUTPUT: 
A!
EXPECTED: 
A!
--------------------------------------------------------
[ OK ]   pattern1.hopix

INPUT:
val a = A
val b1 = B (1)
val c12 = C (1, 2)
val dab = D (a, b1)

val main =
  b1 ? {
  | A => print_string ("A!\n")
  | _ => print_string ("something else!\n")
  }
OUTPUT: 
something else!
EXPECTED: 
something else!
--------------------------------------------------------
[ OK ]   pattern10.hopix

INPUT:
val a = A
val b1 = B (1)
val c12 = C (1, 2)
val dab = D (a, b1)

fun f (x) =
  x ? {
  | A => print_string ("an A!\n")
  | B (_) => print_string ("a B\n")
  | C (_, _) => print_string ("a C!\n")
  | D (_, _) => print_string ("a D!\n")
  }

val main =
    f (a);
    f (b1);
    f (c12);
    f (dab)
OUTPUT: 
an A!
a B
a C!
a D!
EXPECTED: 
an A!
a B
a C!
a D!
--------------------------------------------------------
[ OK ]   pattern11.hopix

INPUT:
val a = A
val b1 = B (1)
val c12 = C (1, 2)
val dab = D (a, b1)

fun f (x) =
  x ? {
  | A => print_string ("an A!\n")
  | B (_) => print_string ("a B\n")
  | C (_, _) => print_string ("a C!\n")
  | D (_, _) => print_string ("a D!\n")
  }

val n = Nil
fun c (x, xs) = Cons (x, xs)

fun iter (f, l) =
  l ? {
  | Cons (x, Nil) => f (x)
  | Cons (x, xs) => (f (x); iter (f, xs))
  }

val l = c (a, c (b1, c (c12, c (dab, n))))

val main = iter (f, l)
OUTPUT: 
an A!
a B
a C!
a D!
EXPECTED: 
an A!
a B
a C!
a D!
--------------------------------------------------------
[ OK ]   pattern12.hopix

INPUT:
val a = A
val b1 = B (1)
val c12 = C (1, 2)
val dab = D (a, b1)

fun f (x) =
  x ? {
  | A => print_string ("an A!\n")
  | B (_) => print_string ("a B\n")
  | C (_, _) => print_string ("a C!\n")
  | D (_, _) => print_string ("a D!\n")
  }

val n = Nil
fun c (x, xs) = Cons (x, xs)

fun iter (f, l) =
  l ? {
  | Cons (x, xs) => (f (x); iter (f, xs))
  | Cons (x, Nil) => f (x)
  | Nil => print_string ("Stop!\n")
  }

val l = c (a, c (b1, c (c12, c (dab, n))))

val main = iter (f, l)
OUTPUT: 
an A!
a B
a C!
a D!
Stop!
EXPECTED: 
an A!
a B
a C!
a D!
Stop!
--------------------------------------------------------
[ OK ]   pattern13.hopix

INPUT:
val a = A
val b1 = B (1)
val c12 = C (1, 2)
val dab = D (a, b1)

fun f (x) =
  x ? {
  | A & A => print_string ("an A!\n")
  | B (_) & x => print_string ("a B\n")
  | C (_, _) & _ => print_string ("a C!\n")
  | D (_, _) & (D (_, _) | D (_, _)) => print_string ("a D!\n")
  }

val n = Nil
fun c (x, xs) = Cons (x, xs)

fun iter (f, l) =
  l ? {
  | Cons (x, xs) => (f (x); iter (f, xs))
  | Cons (x, Nil) => f (x)
  | Nil => print_string ("Stop!\n")
  }

val l = c (a, c (b1, c (c12, c (dab, n))))

val main = iter (f, l)
OUTPUT: 
an A!
a B
a C!
a D!
Stop!
EXPECTED: 
an A!
a B
a C!
a D!
Stop!
--------------------------------------------------------
[ OK ]   pattern2.hopix

INPUT:
val a = A
val b1 = B (1)
val c12 = C (1, 2)
val dab = D (a, b1)

val main =
  b1 ? {
  | B (x) => (
    print_string ("B of ");
    print_int (x);
    print_string ("!\n")
  )
  | _ => print_string ("something else!\n")
  }
OUTPUT: 
B of 1!
EXPECTED: 
B of 1!
--------------------------------------------------------
[ OK ]   pattern3.hopix

INPUT:
val a = A
val b1 = B (1)
val c12 = C (1, 2)
val dab = D (a, b1)

val main =
  (B (2)) ? {
  | B (x) => (
    print_string ("B of ");
    print_int (x);
    print_string ("!\n")
  )
  | _ => print_string ("something else!\n")
  }
OUTPUT: 
B of 2!
EXPECTED: 
B of 2!
--------------------------------------------------------
[ OK ]   pattern4.hopix

INPUT:
val a = A
val b1 = B (1)
val c12 = C (1, 2)
val dab = D (a, b1)

val main =
  a ? {
  | B (x) => (
    print_string ("B of ");
    print_int (x);
    print_string ("!\n")
  )
  | _ => print_string ("something else!\n")
  }
OUTPUT: 
something else!
EXPECTED: 
something else!
--------------------------------------------------------
[ OK ]   pattern5.hopix

INPUT:
val a = A
val b1 = B (1)
val c12 = C (1, 2)
val dab = D (a, b1)

val main =
  c12 ? {
  | C (x, y) => (
    print_string ("C of ");
    print_int (x);
    print_string (" and ");
    print_int (y);
    print_string ("!\n")
  )
  | _ => print_string ("something else!\n")
  }
OUTPUT: 
C of 1 and 2!
EXPECTED: 
C of 1 and 2!
--------------------------------------------------------
[ OK ]   pattern6.hopix

INPUT:
val a = A
val b1 = B (1)
val c12 = C (1, 2)
val dab = D (a, b1)

val main =
  dab ? {
  | D (A, B (x)) => (
    print_string ("D with a B of ");
    print_int (x);
    print_string ("!\n")
  )
  | _ => print_string ("something else!\n")
  }
OUTPUT: 
D with a B of 1!
EXPECTED: 
D with a B of 1!
--------------------------------------------------------
[ OK ]   pattern7.hopix

INPUT:
val a = A
val b1 = B (1)
val c12 = C (1, 2)
val dab = D (a, b1)

val main =
  a ? {
  | A | B (_) =>
    print_string ("An A or a B!\n")
  | _ => print_string ("something else!\n")
  }
OUTPUT: 
An A or a B!
EXPECTED: 
An A or a B!
--------------------------------------------------------
[ OK ]   pattern8.hopix

INPUT:
val a = A
val b1 = B (1)
val c12 = C (1, 2)
val dab = D (a, b1)

val main =
  b1 ? {
  | A | B (_) =>
    print_string ("An A or a B!\n")
  | _ => print_string ("something else!\n")
  }
OUTPUT: 
An A or a B!
EXPECTED: 
An A or a B!
--------------------------------------------------------
[ OK ]   pattern9.hopix

INPUT:
val a = A
val b1 = B (1)
val c12 = C (1, 2)
val dab = D (a, b1)

val main =
  dab ? {
  | A | B (_) =>
    print_string ("An A or a B!\n")
  | _ => print_string ("something else!\n")
  }
OUTPUT: 
something else!
EXPECTED: 
something else!
--------------------------------------------------------
[ OK ]   rec.hopix

INPUT:
fun odd (x) =
  if x = 0 then false
  else if x = 1 then true
  else even (x - 1)
and even (x) =
  if x = 0 then true
  else if x = 1 then false
  else odd (x - 1)

fun is_odd (x) =
  if odd (x) then print_string ("Odd!\n") else print_string ("Not odd!\n")

fun is_even (x) =
  if even (x) then print_string ("Even!\n") else print_string ("Not even!\n")

val main =
  is_odd (2);
  is_odd (3);
  is_even (2);
  is_even (3)
OUTPUT: 
Not odd!
Odd!
Even!
Not even!
EXPECTED: 
Not odd!
Odd!
Even!
Not even!
--------------------------------------------------------
[ OK ]   rec0.hopix

INPUT:
fun fact (x) =
  if x <= 0 then 1 else x * fact (x - 1)

val main =
  print_int (fact (5));
  print_string ("!\n");
  print_int (fact (10));
  print_string ("!\n");
  print_int (fact (-1));
  print_string ("!\n")

OUTPUT: 
120!
3628800!
1!
EXPECTED: 
120!
3628800!
1!
--------------------------------------------------------
[ OK ]   rec1.hopix

INPUT:
fun foldn (x, accu, f) =
  if x <= 0 then accu else foldn (x - 1, f (accu, x), f)

fun fact (x) = foldn (x, 1, \(x, y) => x * y)

val main =
  print_int (fact (5));
  print_string ("!\n");
  print_int (fact (10));
  print_string ("!\n");
  print_int (fact (-1));
  print_string ("!\n")

OUTPUT: 
120!
3628800!
1!
EXPECTED: 
120!
3628800!
1!
--------------------------------------------------------
[ OK ]   rec2.hopix

INPUT:
fun folda (x, accu, f) =
  if x <= 0 then accu else foldb (x - 1, f (accu, x), f)
and foldb (x, accu, f) =
  if x <= 0 then accu else foldc (x - 1, f (accu, x), f)
and foldc (x, accu, f) =
  if x <= 0 then accu else folda (x - 1, f (accu, x), f)

fun fact (x) = folda (x, 1, \(x, y) => x * y)

val main =
  print_int (fact (5));
  print_string ("!\n");
  print_int (fact (10));
  print_string ("!\n");
  print_int (fact (-1));
  print_string ("!\n")

OUTPUT: 
120!
3628800!
1!
EXPECTED: 
120!
3628800!
1!
--------------------------------------------------------
[ OK ]   ref0.hopix

INPUT:
val main =
  val x = ref 0;
  print_int (!x);
  print_string (" !\n")
OUTPUT: 
0 !
EXPECTED: 
0 !
--------------------------------------------------------
[ OK ]   ref1.hopix

INPUT:
val main =
  val x = ref 0;
  print_int (!x);
  print_string (" !\n");
  x := 1;
  print_int (!x);
  print_string (" !\n")
OUTPUT: 
0 !
1 !
EXPECTED: 
0 !
1 !
--------------------------------------------------------
[ OK ]   ref2.hopix

INPUT:
val main =
  val x = ref 1;
  val y = ref 2;
  val tmp = ref 0;
  tmp := !x;
  x := !y;
  y := !tmp;
  print_string ("x = ");
  print_int (!x);
  print_string (" y = ");
  print_int (!y);
  print_string ("\n")
OUTPUT: 
x = 2 y = 1
EXPECTED: 
x = 2 y = 1
--------------------------------------------------------
[ OK ]   ref3.hopix

INPUT:
val main =
  val x = ref (ref 0);
  val y = ref (! x);
  (! y) := 1;
  print_int (! (! x));
  print_string ("\n")
OUTPUT: 
1
EXPECTED: 
1
--------------------------------------------------------
[ OK ]   ref4.hopix

INPUT:
val z = ref 0
val x = ref (ref 0)
val main =
   x := z;
   z := 1;
   print_int (! (! x));
   print_string ("!\n")
OUTPUT: 
1!
EXPECTED: 
1!
--------------------------------------------------------
[ OK ]   slam.hopix

INPUT:
val nil = Nil
fun cons (x, xs) = Cons (x, xs)

fun map (f, l) =
  l ? {
  | Nil => nil
  | Cons (x, xs) => cons (f (x), map (f, xs))
 }

fun append (l1, l2) =
  l1 ? {
  | Nil => l2
  | Cons (x, xs) => cons (x, append (xs, l2))
  }

fun flatten (l) =
  l ? {
  | Nil => nil
  | Cons (l, ls) => append (l, flatten (ls))
  }

fun return (x)  = cons (x, nil)
fun bind (m, f) = flatten (map (f, m))

fun choice (a, b) = cons (a, cons (b, nil))

fun bits (n) =
  if n = 0 then return (nil) else
    bind (choice (0, 1), \(b) =>
      bind (bits (n - 1), \(bs) =>
        return (cons (b, bs))
     )
    )

val all_bytes = bits (8)

fun iter (f, l) =
  l ? {
  | Nil =>
    nil
  | Cons (x, xs) =>
    (f (x);
     iter (f, xs))
  }

fun print_bits (bs) =
  print_string ("[");
  fun aux (bs) =
    bs ? {
    | Nil => print_string ("")
    | Cons (b, bs) => (print_int (b); print_string (";"); aux (bs))
    };
  aux (bs);
  print_string ("]")

val main1 =
  iter (\(b) => (print_bits (b); print_string ("\n")),
        all_bytes)

val all_word12 = bits (12)

fun fold (f, accu, l) = l? {
  | Nil => accu
  | Cons (x, xs) => fold (f, f (accu, x), xs)
}

fun ones (b) = fold ((\(a, b) => a + b), 0, b)

val main2 =
    val count = ref (0);
    iter (\(b) => count := !count + ones (b), all_word12);
    print_int (!count)

OUTPUT: 
[0;0;0;0;0;0;0;0;]
[0;0;0;0;0;0;0;1;]
[0;0;0;0;0;0;1;0;]
[0;0;0;0;0;0;1;1;]
[0;0;0;0;0;1;0;0;]
[0;0;0;0;0;1;0;1;]
[0;0;0;0;0;1;1;0;]
[0;0;0;0;0;1;1;1;]
[0;0;0;0;1;0;0;0;]
[0;0;0;0;1;0;0;1;]
[0;0;0;0;1;0;1;0;]
[0;0;0;0;1;0;1;1;]
[0;0;0;0;1;1;0;0;]
[0;0;0;0;1;1;0;1;]
[0;0;0;0;1;1;1;0;]
[0;0;0;0;1;1;1;1;]
[0;0;0;1;0;0;0;0;]
[0;0;0;1;0;0;0;1;]
[0;0;0;1;0;0;1;0;]
[0;0;0;1;0;0;1;1;]
[0;0;0;1;0;1;0;0;]
[0;0;0;1;0;1;0;1;]
[0;0;0;1;0;1;1;0;]
[0;0;0;1;0;1;1;1;]
[0;0;0;1;1;0;0;0;]
[0;0;0;1;1;0;0;1;]
[0;0;0;1;1;0;1;0;]
[0;0;0;1;1;0;1;1;]
[0;0;0;1;1;1;0;0;]
[0;0;0;1;1;1;0;1;]
[0;0;0;1;1;1;1;0;]
[0;0;0;1;1;1;1;1;]
[0;0;1;0;0;0;0;0;]
[0;0;1;0;0;0;0;1;]
[0;0;1;0;0;0;1;0;]
[0;0;1;0;0;0;1;1;]
[0;0;1;0;0;1;0;0;]
[0;0;1;0;0;1;0;1;]
[0;0;1;0;0;1;1;0;]
[0;0;1;0;0;1;1;1;]
[0;0;1;0;1;0;0;0;]
[0;0;1;0;1;0;0;1;]
[0;0;1;0;1;0;1;0;]
[0;0;1;0;1;0;1;1;]
[0;0;1;0;1;1;0;0;]
[0;0;1;0;1;1;0;1;]
[0;0;1;0;1;1;1;0;]
[0;0;1;0;1;1;1;1;]
[0;0;1;1;0;0;0;0;]
[0;0;1;1;0;0;0;1;]
[0;0;1;1;0;0;1;0;]
[0;0;1;1;0;0;1;1;]
[0;0;1;1;0;1;0;0;]
[0;0;1;1;0;1;0;1;]
[0;0;1;1;0;1;1;0;]
[0;0;1;1;0;1;1;1;]
[0;0;1;1;1;0;0;0;]
[0;0;1;1;1;0;0;1;]
[0;0;1;1;1;0;1;0;]
[0;0;1;1;1;0;1;1;]
[0;0;1;1;1;1;0;0;]
[0;0;1;1;1;1;0;1;]
[0;0;1;1;1;1;1;0;]
[0;0;1;1;1;1;1;1;]
[0;1;0;0;0;0;0;0;]
[0;1;0;0;0;0;0;1;]
[0;1;0;0;0;0;1;0;]
[0;1;0;0;0;0;1;1;]
[0;1;0;0;0;1;0;0;]
[0;1;0;0;0;1;0;1;]
[0;1;0;0;0;1;1;0;]
[0;1;0;0;0;1;1;1;]
[0;1;0;0;1;0;0;0;]
[0;1;0;0;1;0;0;1;]
[0;1;0;0;1;0;1;0;]
[0;1;0;0;1;0;1;1;]
[0;1;0;0;1;1;0;0;]
[0;1;0;0;1;1;0;1;]
[0;1;0;0;1;1;1;0;]
[0;1;0;0;1;1;1;1;]
[0;1;0;1;0;0;0;0;]
[0;1;0;1;0;0;0;1;]
[0;1;0;1;0;0;1;0;]
[0;1;0;1;0;0;1;1;]
[0;1;0;1;0;1;0;0;]
[0;1;0;1;0;1;0;1;]
[0;1;0;1;0;1;1;0;]
[0;1;0;1;0;1;1;1;]
[0;1;0;1;1;0;0;0;]
[0;1;0;1;1;0;0;1;]
[0;1;0;1;1;0;1;0;]
[0;1;0;1;1;0;1;1;]
[0;1;0;1;1;1;0;0;]
[0;1;0;1;1;1;0;1;]
[0;1;0;1;1;1;1;0;]
[0;1;0;1;1;1;1;1;]
[0;1;1;0;0;0;0;0;]
[0;1;1;0;0;0;0;1;]
[0;1;1;0;0;0;1;0;]
[0;1;1;0;0;0;1;1;]
[0;1;1;0;0;1;0;0;]
[0;1;1;0;0;1;0;1;]
[0;1;1;0;0;1;1;0;]
[0;1;1;0;0;1;1;1;]
[0;1;1;0;1;0;0;0;]
[0;1;1;0;1;0;0;1;]
[0;1;1;0;1;0;1;0;]
[0;1;1;0;1;0;1;1;]
[0;1;1;0;1;1;0;0;]
[0;1;1;0;1;1;0;1;]
[0;1;1;0;1;1;1;0;]
[0;1;1;0;1;1;1;1;]
[0;1;1;1;0;0;0;0;]
[0;1;1;1;0;0;0;1;]
[0;1;1;1;0;0;1;0;]
[0;1;1;1;0;0;1;1;]
[0;1;1;1;0;1;0;0;]
[0;1;1;1;0;1;0;1;]
[0;1;1;1;0;1;1;0;]
[0;1;1;1;0;1;1;1;]
[0;1;1;1;1;0;0;0;]
[0;1;1;1;1;0;0;1;]
[0;1;1;1;1;0;1;0;]
[0;1;1;1;1;0;1;1;]
[0;1;1;1;1;1;0;0;]
[0;1;1;1;1;1;0;1;]
[0;1;1;1;1;1;1;0;]
[0;1;1;1;1;1;1;1;]
[1;0;0;0;0;0;0;0;]
[1;0;0;0;0;0;0;1;]
[1;0;0;0;0;0;1;0;]
[1;0;0;0;0;0;1;1;]
[1;0;0;0;0;1;0;0;]
[1;0;0;0;0;1;0;1;]
[1;0;0;0;0;1;1;0;]
[1;0;0;0;0;1;1;1;]
[1;0;0;0;1;0;0;0;]
[1;0;0;0;1;0;0;1;]
[1;0;0;0;1;0;1;0;]
[1;0;0;0;1;0;1;1;]
[1;0;0;0;1;1;0;0;]
[1;0;0;0;1;1;0;1;]
[1;0;0;0;1;1;1;0;]
[1;0;0;0;1;1;1;1;]
[1;0;0;1;0;0;0;0;]
[1;0;0;1;0;0;0;1;]
[1;0;0;1;0;0;1;0;]
[1;0;0;1;0;0;1;1;]
[1;0;0;1;0;1;0;0;]
[1;0;0;1;0;1;0;1;]
[1;0;0;1;0;1;1;0;]
[1;0;0;1;0;1;1;1;]
[1;0;0;1;1;0;0;0;]
[1;0;0;1;1;0;0;1;]
[1;0;0;1;1;0;1;0;]
[1;0;0;1;1;0;1;1;]
[1;0;0;1;1;1;0;0;]
[1;0;0;1;1;1;0;1;]
[1;0;0;1;1;1;1;0;]
[1;0;0;1;1;1;1;1;]
[1;0;1;0;0;0;0;0;]
[1;0;1;0;0;0;0;1;]
[1;0;1;0;0;0;1;0;]
[1;0;1;0;0;0;1;1;]
[1;0;1;0;0;1;0;0;]
[1;0;1;0;0;1;0;1;]
[1;0;1;0;0;1;1;0;]
[1;0;1;0;0;1;1;1;]
[1;0;1;0;1;0;0;0;]
[1;0;1;0;1;0;0;1;]
[1;0;1;0;1;0;1;0;]
[1;0;1;0;1;0;1;1;]
[1;0;1;0;1;1;0;0;]
[1;0;1;0;1;1;0;1;]
[1;0;1;0;1;1;1;0;]
[1;0;1;0;1;1;1;1;]
[1;0;1;1;0;0;0;0;]
[1;0;1;1;0;0;0;1;]
[1;0;1;1;0;0;1;0;]
[1;0;1;1;0;0;1;1;]
[1;0;1;1;0;1;0;0;]
[1;0;1;1;0;1;0;1;]
[1;0;1;1;0;1;1;0;]
[1;0;1;1;0;1;1;1;]
[1;0;1;1;1;0;0;0;]
[1;0;1;1;1;0;0;1;]
[1;0;1;1;1;0;1;0;]
[1;0;1;1;1;0;1;1;]
[1;0;1;1;1;1;0;0;]
[1;0;1;1;1;1;0;1;]
[1;0;1;1;1;1;1;0;]
[1;0;1;1;1;1;1;1;]
[1;1;0;0;0;0;0;0;]
[1;1;0;0;0;0;0;1;]
[1;1;0;0;0;0;1;0;]
[1;1;0;0;0;0;1;1;]
[1;1;0;0;0;1;0;0;]
[1;1;0;0;0;1;0;1;]
[1;1;0;0;0;1;1;0;]
[1;1;0;0;0;1;1;1;]
[1;1;0;0;1;0;0;0;]
[1;1;0;0;1;0;0;1;]
[1;1;0;0;1;0;1;0;]
[1;1;0;0;1;0;1;1;]
[1;1;0;0;1;1;0;0;]
[1;1;0;0;1;1;0;1;]
[1;1;0;0;1;1;1;0;]
[1;1;0;0;1;1;1;1;]
[1;1;0;1;0;0;0;0;]
[1;1;0;1;0;0;0;1;]
[1;1;0;1;0;0;1;0;]
[1;1;0;1;0;0;1;1;]
[1;1;0;1;0;1;0;0;]
[1;1;0;1;0;1;0;1;]
[1;1;0;1;0;1;1;0;]
[1;1;0;1;0;1;1;1;]
[1;1;0;1;1;0;0;0;]
[1;1;0;1;1;0;0;1;]
[1;1;0;1;1;0;1;0;]
[1;1;0;1;1;0;1;1;]
[1;1;0;1;1;1;0;0;]
[1;1;0;1;1;1;0;1;]
[1;1;0;1;1;1;1;0;]
[1;1;0;1;1;1;1;1;]
[1;1;1;0;0;0;0;0;]
[1;1;1;0;0;0;0;1;]
[1;1;1;0;0;0;1;0;]
[1;1;1;0;0;0;1;1;]
[1;1;1;0;0;1;0;0;]
[1;1;1;0;0;1;0;1;]
[1;1;1;0;0;1;1;0;]
[1;1;1;0;0;1;1;1;]
[1;1;1;0;1;0;0;0;]
[1;1;1;0;1;0;0;1;]
[1;1;1;0;1;0;1;0;]
[1;1;1;0;1;0;1;1;]
[1;1;1;0;1;1;0;0;]
[1;1;1;0;1;1;0;1;]
[1;1;1;0;1;1;1;0;]
[1;1;1;0;1;1;1;1;]
[1;1;1;1;0;0;0;0;]
[1;1;1;1;0;0;0;1;]
[1;1;1;1;0;0;1;0;]
[1;1;1;1;0;0;1;1;]
[1;1;1;1;0;1;0;0;]
[1;1;1;1;0;1;0;1;]
[1;1;1;1;0;1;1;0;]
[1;1;1;1;0;1;1;1;]
[1;1;1;1;1;0;0;0;]
[1;1;1;1;1;0;0;1;]
[1;1;1;1;1;0;1;0;]
[1;1;1;1;1;0;1;1;]
[1;1;1;1;1;1;0;0;]
[1;1;1;1;1;1;0;1;]
[1;1;1;1;1;1;1;0;]
[1;1;1;1;1;1;1;1;]
24576EXPECTED: 
[0;0;0;0;0;0;0;0;]
[0;0;0;0;0;0;0;1;]
[0;0;0;0;0;0;1;0;]
[0;0;0;0;0;0;1;1;]
[0;0;0;0;0;1;0;0;]
[0;0;0;0;0;1;0;1;]
[0;0;0;0;0;1;1;0;]
[0;0;0;0;0;1;1;1;]
[0;0;0;0;1;0;0;0;]
[0;0;0;0;1;0;0;1;]
[0;0;0;0;1;0;1;0;]
[0;0;0;0;1;0;1;1;]
[0;0;0;0;1;1;0;0;]
[0;0;0;0;1;1;0;1;]
[0;0;0;0;1;1;1;0;]
[0;0;0;0;1;1;1;1;]
[0;0;0;1;0;0;0;0;]
[0;0;0;1;0;0;0;1;]
[0;0;0;1;0;0;1;0;]
[0;0;0;1;0;0;1;1;]
[0;0;0;1;0;1;0;0;]
[0;0;0;1;0;1;0;1;]
[0;0;0;1;0;1;1;0;]
[0;0;0;1;0;1;1;1;]
[0;0;0;1;1;0;0;0;]
[0;0;0;1;1;0;0;1;]
[0;0;0;1;1;0;1;0;]
[0;0;0;1;1;0;1;1;]
[0;0;0;1;1;1;0;0;]
[0;0;0;1;1;1;0;1;]
[0;0;0;1;1;1;1;0;]
[0;0;0;1;1;1;1;1;]
[0;0;1;0;0;0;0;0;]
[0;0;1;0;0;0;0;1;]
[0;0;1;0;0;0;1;0;]
[0;0;1;0;0;0;1;1;]
[0;0;1;0;0;1;0;0;]
[0;0;1;0;0;1;0;1;]
[0;0;1;0;0;1;1;0;]
[0;0;1;0;0;1;1;1;]
[0;0;1;0;1;0;0;0;]
[0;0;1;0;1;0;0;1;]
[0;0;1;0;1;0;1;0;]
[0;0;1;0;1;0;1;1;]
[0;0;1;0;1;1;0;0;]
[0;0;1;0;1;1;0;1;]
[0;0;1;0;1;1;1;0;]
[0;0;1;0;1;1;1;1;]
[0;0;1;1;0;0;0;0;]
[0;0;1;1;0;0;0;1;]
[0;0;1;1;0;0;1;0;]
[0;0;1;1;0;0;1;1;]
[0;0;1;1;0;1;0;0;]
[0;0;1;1;0;1;0;1;]
[0;0;1;1;0;1;1;0;]
[0;0;1;1;0;1;1;1;]
[0;0;1;1;1;0;0;0;]
[0;0;1;1;1;0;0;1;]
[0;0;1;1;1;0;1;0;]
[0;0;1;1;1;0;1;1;]
[0;0;1;1;1;1;0;0;]
[0;0;1;1;1;1;0;1;]
[0;0;1;1;1;1;1;0;]
[0;0;1;1;1;1;1;1;]
[0;1;0;0;0;0;0;0;]
[0;1;0;0;0;0;0;1;]
[0;1;0;0;0;0;1;0;]
[0;1;0;0;0;0;1;1;]
[0;1;0;0;0;1;0;0;]
[0;1;0;0;0;1;0;1;]
[0;1;0;0;0;1;1;0;]
[0;1;0;0;0;1;1;1;]
[0;1;0;0;1;0;0;0;]
[0;1;0;0;1;0;0;1;]
[0;1;0;0;1;0;1;0;]
[0;1;0;0;1;0;1;1;]
[0;1;0;0;1;1;0;0;]
[0;1;0;0;1;1;0;1;]
[0;1;0;0;1;1;1;0;]
[0;1;0;0;1;1;1;1;]
[0;1;0;1;0;0;0;0;]
[0;1;0;1;0;0;0;1;]
[0;1;0;1;0;0;1;0;]
[0;1;0;1;0;0;1;1;]
[0;1;0;1;0;1;0;0;]
[0;1;0;1;0;1;0;1;]
[0;1;0;1;0;1;1;0;]
[0;1;0;1;0;1;1;1;]
[0;1;0;1;1;0;0;0;]
[0;1;0;1;1;0;0;1;]
[0;1;0;1;1;0;1;0;]
[0;1;0;1;1;0;1;1;]
[0;1;0;1;1;1;0;0;]
[0;1;0;1;1;1;0;1;]
[0;1;0;1;1;1;1;0;]
[0;1;0;1;1;1;1;1;]
[0;1;1;0;0;0;0;0;]
[0;1;1;0;0;0;0;1;]
[0;1;1;0;0;0;1;0;]
[0;1;1;0;0;0;1;1;]
[0;1;1;0;0;1;0;0;]
[0;1;1;0;0;1;0;1;]
[0;1;1;0;0;1;1;0;]
[0;1;1;0;0;1;1;1;]
[0;1;1;0;1;0;0;0;]
[0;1;1;0;1;0;0;1;]
[0;1;1;0;1;0;1;0;]
[0;1;1;0;1;0;1;1;]
[0;1;1;0;1;1;0;0;]
[0;1;1;0;1;1;0;1;]
[0;1;1;0;1;1;1;0;]
[0;1;1;0;1;1;1;1;]
[0;1;1;1;0;0;0;0;]
[0;1;1;1;0;0;0;1;]
[0;1;1;1;0;0;1;0;]
[0;1;1;1;0;0;1;1;]
[0;1;1;1;0;1;0;0;]
[0;1;1;1;0;1;0;1;]
[0;1;1;1;0;1;1;0;]
[0;1;1;1;0;1;1;1;]
[0;1;1;1;1;0;0;0;]
[0;1;1;1;1;0;0;1;]
[0;1;1;1;1;0;1;0;]
[0;1;1;1;1;0;1;1;]
[0;1;1;1;1;1;0;0;]
[0;1;1;1;1;1;0;1;]
[0;1;1;1;1;1;1;0;]
[0;1;1;1;1;1;1;1;]
[1;0;0;0;0;0;0;0;]
[1;0;0;0;0;0;0;1;]
[1;0;0;0;0;0;1;0;]
[1;0;0;0;0;0;1;1;]
[1;0;0;0;0;1;0;0;]
[1;0;0;0;0;1;0;1;]
[1;0;0;0;0;1;1;0;]
[1;0;0;0;0;1;1;1;]
[1;0;0;0;1;0;0;0;]
[1;0;0;0;1;0;0;1;]
[1;0;0;0;1;0;1;0;]
[1;0;0;0;1;0;1;1;]
[1;0;0;0;1;1;0;0;]
[1;0;0;0;1;1;0;1;]
[1;0;0;0;1;1;1;0;]
[1;0;0;0;1;1;1;1;]
[1;0;0;1;0;0;0;0;]
[1;0;0;1;0;0;0;1;]
[1;0;0;1;0;0;1;0;]
[1;0;0;1;0;0;1;1;]
[1;0;0;1;0;1;0;0;]
[1;0;0;1;0;1;0;1;]
[1;0;0;1;0;1;1;0;]
[1;0;0;1;0;1;1;1;]
[1;0;0;1;1;0;0;0;]
[1;0;0;1;1;0;0;1;]
[1;0;0;1;1;0;1;0;]
[1;0;0;1;1;0;1;1;]
[1;0;0;1;1;1;0;0;]
[1;0;0;1;1;1;0;1;]
[1;0;0;1;1;1;1;0;]
[1;0;0;1;1;1;1;1;]
[1;0;1;0;0;0;0;0;]
[1;0;1;0;0;0;0;1;]
[1;0;1;0;0;0;1;0;]
[1;0;1;0;0;0;1;1;]
[1;0;1;0;0;1;0;0;]
[1;0;1;0;0;1;0;1;]
[1;0;1;0;0;1;1;0;]
[1;0;1;0;0;1;1;1;]
[1;0;1;0;1;0;0;0;]
[1;0;1;0;1;0;0;1;]
[1;0;1;0;1;0;1;0;]
[1;0;1;0;1;0;1;1;]
[1;0;1;0;1;1;0;0;]
[1;0;1;0;1;1;0;1;]
[1;0;1;0;1;1;1;0;]
[1;0;1;0;1;1;1;1;]
[1;0;1;1;0;0;0;0;]
[1;0;1;1;0;0;0;1;]
[1;0;1;1;0;0;1;0;]
[1;0;1;1;0;0;1;1;]
[1;0;1;1;0;1;0;0;]
[1;0;1;1;0;1;0;1;]
[1;0;1;1;0;1;1;0;]
[1;0;1;1;0;1;1;1;]
[1;0;1;1;1;0;0;0;]
[1;0;1;1;1;0;0;1;]
[1;0;1;1;1;0;1;0;]
[1;0;1;1;1;0;1;1;]
[1;0;1;1;1;1;0;0;]
[1;0;1;1;1;1;0;1;]
[1;0;1;1;1;1;1;0;]
[1;0;1;1;1;1;1;1;]
[1;1;0;0;0;0;0;0;]
[1;1;0;0;0;0;0;1;]
[1;1;0;0;0;0;1;0;]
[1;1;0;0;0;0;1;1;]
[1;1;0;0;0;1;0;0;]
[1;1;0;0;0;1;0;1;]
[1;1;0;0;0;1;1;0;]
[1;1;0;0;0;1;1;1;]
[1;1;0;0;1;0;0;0;]
[1;1;0;0;1;0;0;1;]
[1;1;0;0;1;0;1;0;]
[1;1;0;0;1;0;1;1;]
[1;1;0;0;1;1;0;0;]
[1;1;0;0;1;1;0;1;]
[1;1;0;0;1;1;1;0;]
[1;1;0;0;1;1;1;1;]
[1;1;0;1;0;0;0;0;]
[1;1;0;1;0;0;0;1;]
[1;1;0;1;0;0;1;0;]
[1;1;0;1;0;0;1;1;]
[1;1;0;1;0;1;0;0;]
[1;1;0;1;0;1;0;1;]
[1;1;0;1;0;1;1;0;]
[1;1;0;1;0;1;1;1;]
[1;1;0;1;1;0;0;0;]
[1;1;0;1;1;0;0;1;]
[1;1;0;1;1;0;1;0;]
[1;1;0;1;1;0;1;1;]
[1;1;0;1;1;1;0;0;]
[1;1;0;1;1;1;0;1;]
[1;1;0;1;1;1;1;0;]
[1;1;0;1;1;1;1;1;]
[1;1;1;0;0;0;0;0;]
[1;1;1;0;0;0;0;1;]
[1;1;1;0;0;0;1;0;]
[1;1;1;0;0;0;1;1;]
[1;1;1;0;0;1;0;0;]
[1;1;1;0;0;1;0;1;]
[1;1;1;0;0;1;1;0;]
[1;1;1;0;0;1;1;1;]
[1;1;1;0;1;0;0;0;]
[1;1;1;0;1;0;0;1;]
[1;1;1;0;1;0;1;0;]
[1;1;1;0;1;0;1;1;]
[1;1;1;0;1;1;0;0;]
[1;1;1;0;1;1;0;1;]
[1;1;1;0;1;1;1;0;]
[1;1;1;0;1;1;1;1;]
[1;1;1;1;0;0;0;0;]
[1;1;1;1;0;0;0;1;]
[1;1;1;1;0;0;1;0;]
[1;1;1;1;0;0;1;1;]
[1;1;1;1;0;1;0;0;]
[1;1;1;1;0;1;0;1;]
[1;1;1;1;0;1;1;0;]
[1;1;1;1;0;1;1;1;]
[1;1;1;1;1;0;0;0;]
[1;1;1;1;1;0;0;1;]
[1;1;1;1;1;0;1;0;]
[1;1;1;1;1;0;1;1;]
[1;1;1;1;1;1;0;0;]
[1;1;1;1;1;1;0;1;]
[1;1;1;1;1;1;1;0;]
[1;1;1;1;1;1;1;1;]
24576--------------------------------------------------------
[ OK ]   stream.hopix

INPUT:
fun stream (state, next) = Stream (state, next)

fun from (n) = stream (n, \(n) => Return (n, n + 1))

fun take (n, s) =
  if n = 0 then
    Nil
  else s ? Stream (state, next) => next (state) ? {
      | EOS =>
        Nil
      | Return (value, new_state) =>
        Cons (value, take (n - 1, Stream (new_state, next)))
      }

fun fold_list (f, accu, l) =
  l ? { Nil => accu | Cons (x, xs) => fold_list (f, f (accu, x), xs) }

fun sum (l) = fold_list ((\(accu, x) => accu + x), 0, l)

val main =
  print_int (sum (take (10, from (0))))
OUTPUT: 
45EXPECTED: 
45--------------------------------------------------------
[ OK ]   stream0.hopix

INPUT:
fun stream (state, next) = Stream (state, next)

fun from (n) = stream (n, \(n) => Return (n, n + 1))

fun combine (s1, s2) =
 s1 ? Stream (state1, next_state1) =>
 s2 ? Stream (state2, next_state2) =>
   Stream (Pair (state1, state2), \(state) =>
     state ? Pair (state1, state2) =>
       next_state1 (state1) ? {
       | EOS => EOS
       | Return (x1, next_state1) =>
         next_state2 (state2) ? {
	 | EOS => EOS
	 | Return (x2, next_state2) =>
	   Return (Pair (x1, x2), Pair (next_state1, next_state2))
         }
       })

fun take (n, s) =
  if n = 0 then
    Nil
  else s ? Stream (state, next) => next (state) ? {
      | EOS =>
        Nil
      | Return (value, new_state) =>
        Cons (value, take (n - 1, Stream (new_state, next)))
      }

fun fold_list_pair (f, accu, l) =
  l ? { Nil => accu | Cons (Pair (x, y), xs) => fold_list_pair (f, f (accu, x, y), xs) }

fun sum (l) = fold_list_pair ((\(accu, x, y) => accu + x + y), 0, l)

val main =
  print_int (sum (take (10, combine (from (0), from (0)))))
OUTPUT: 
90EXPECTED: 
90--------------------------------------------------------
[ OK ]   stream1.hopix

INPUT:
fun stream (state, next) = Stream (state, next)

fun from (n) = stream (n, \(n) => Return (n, n + 1))

fun combine (s1, s2) =
 s1 ? Stream (state1, next_state1) =>
 s2 ? Stream (state2, next_state2) =>
   Stream (Pair (state1, state2), \(state) =>
     state ? Pair (state1, state2) =>
       next_state1 (state1) ? {
       | EOS => EOS
       | Return (x1, next_state1) =>
         next_state2 (state2) ? {
	 | EOS => EOS
	 | Return (x2, next_state2) =>
	   Return (Pair (x1, x2), Pair (next_state1, next_state2))
         }
       })

fun take (n, s) =
  if n = 0 then
    Nil
  else s ? Stream (state, next) => next (state) ? {
      | EOS =>
        Nil
      | Return (value, new_state) =>
        Cons (value, take (n - 1, Stream (new_state, next)))
      }

fun map (f, s) = s ? Stream (state, next_state) =>
  Stream (state, \(state) =>
    next_state (state) ? { EOS => EOS | Return (x, new_state) => Return (f (x), new_state) })

fun fold_list (f, accu, l) =
  l ? { Nil => accu | Cons (x, xs) => fold_list (f, f (accu, x), xs) }

fun sum (l) = fold_list ((\(accu, x) => accu + x), 0, l)

fun sum_pair (p) = p ? Pair (x, y) => x + y

val main =
  print_int (sum (take (10, map (sum_pair, combine (from (0), from (0))))))
OUTPUT: 
90EXPECTED: 
90--------------------------------------------------------
[ OK ]   while.hopix

INPUT:
val i = 5
val count = ref 1
val n = ref i
val main =
  while (!n > 0) {
   count := !count * !n;
   n := !n - 1
  };
  print_string ("fact of ");
  print_int (i);
  print_string (" is ");
  print_int (!count);
  print_string ("\n")
OUTPUT: 
fact of 5 is 120
EXPECTED: 
fact of 5 is 120
--------------------------------------------------------
[ OK ]   while0.hopix

INPUT:
val main =
  while (false) {
     print_string ("Not me!\n")
  };
  print_string ("But me!\n")
OUTPUT: 
But me!
EXPECTED: 
But me!
--------------------------------------------------------
[ OK ]   while1.hopix

INPUT:
val main =
  val x = ref true;
  while (!x) {
    x := false
  };
  print_string ("Loop exited!\n")
OUTPUT: 
Loop exited!
EXPECTED: 
Loop exited!
--------------------------------------------------------
[ OK ]   while2.hopix

INPUT:
val main =
   while (0 = 0 && 1 = 0) {
      print_string ("Foo!\n")
   };
   print_string ("Bar!\n")
OUTPUT: 
Bar!
EXPECTED: 
Bar!
--------------------------------------------------------
[ OK ]   while3.hopix

INPUT:
val main =
  val x = ref 0;
  while (!x < 10) {
     while (!x < 5) {
       x := !x + 2
     };
     x := !x + 1
  };
  print_string ("Exit!\n")
OUTPUT: 
Exit!
EXPECTED: 
Exit!
--------------------------------------------------------
GOOD: 71 / 71

BAD:  0 / 0
make[1]: Leaving directory '/home/opam/source/flap/tests-m2/hopix/interpreter/good'
--------------------------------------------------------
Global results:
BAD:   0 / 0
GOOD:  71 / 71
--------------------------------------------------------
make: Leaving directory '/home/opam/source/flap/tests-m2'
