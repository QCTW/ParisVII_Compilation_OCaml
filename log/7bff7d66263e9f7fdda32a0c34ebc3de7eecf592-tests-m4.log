make: Entering directory '/home/opam/source/flap/tests-m4'
make -C ..
make[1]: Entering directory '/home/opam/source/flap'
Source configuration ...
 * Ledit is not present: use default UserInput.
rm -f flap.native
make[1]: Leaving directory '/home/opam/source/flap'
make[1]: Entering directory '/home/opam/source/flap/tests-m4/hopix/compiler/bad'
========================================================
In compiler/bad
GOOD: 0 / 0

BAD:  0 / 0
make[1]: Leaving directory '/home/opam/source/flap/tests-m4/hopix/compiler/bad'
make[1]: Entering directory '/home/opam/source/flap/tests-m4/hopix/compiler/good'
========================================================
In compiler/good
[ OK ]   andpatterns.hopix

INPUT:
type t = A | B

val test1 = A ? { A & A => 0 | B => 1 }

val test = print_int (test1); print_string ("\n")
OUTPUT: 
0
EXPECTED: 
0
--------------------------------------------------------
[ OK ]   andpatterns2.hopix

INPUT:
type t = A (int) | B

val test1 = A (0) ? { A (x : int) & (y : t) => x | B => 1 }

val test2 = A (0) ? { A (_ : int) & (y : t) => y | B => A (0) }

val test = print_int (test1); print_string ("\n")
OUTPUT: 
0
EXPECTED: 
0
--------------------------------------------------------
[ OK ]   apply.hopix

INPUT:
fun apply['a, 'b] (f : 'a -> 'b, x : 'a) : 'b =
  f (x)

fun succ (x : int) : int = x + 1

val one = apply[int, int] (succ, 0)

val test = print_int (one); print_string ("\n")
OUTPUT: 
1
EXPECTED: 
1
--------------------------------------------------------
[ OK ]   arith.hopix

INPUT:
val x = 1 + 1

val test = print_int (x); print_string ("\n")
OUTPUT: 
2
EXPECTED: 
2
--------------------------------------------------------
[ OK ]   arith2.hopix

INPUT:
val x = 1 + 1 * 3
val test = print_int (x); print_string ("\n")
OUTPUT: 
4
EXPECTED: 
4
--------------------------------------------------------
[ OK ]   arith3.hopix

INPUT:
val x = 1 + 1 * 3
val y = x / 2 - 3

val test = print_int (x); print_string (" "); print_int (y); print_string ("\n")
OUTPUT: 
4 -1
EXPECTED: 
4 -1
--------------------------------------------------------
[ OK ]   bool.hopix

INPUT:
val t = true
val f = false

val test = print_string ("True is true, False is false.\n")
OUTPUT: 
True is true, False is false.
EXPECTED: 
True is true, False is false.
--------------------------------------------------------
[ OK ]   bst.hopix

INPUT:
type bst = Leaf (int) | Node (bst, int, bst) | Empty

fun mem (x : int, t : bst) : bool =
  t ? {
  | Empty =>
    false
  | Leaf (y : int) =>
    x = y
  | Node (left : bst, y : int, right : bst) =>
    x = y || (if x < y then mem (x, left) else mem (x, right))
}

fun insert (x : int, t : bst) : bst =
  t ? {
  | Empty => Leaf (x)
  | Leaf (y : int) =>
    if x = y then t
    else if x < y then Node (Leaf (x), y, Empty)
    else Node (Leaf (y), x, Empty)
  | Node (left : bst, y : int, right : bst) =>
    if x = y then t
    else if x < y then Node (insert (x, left), y, right)
    else Node (left, y, insert (x, right))
  }

fun insertRange (start : int, stop : int, t : bst) : bst =
  if stop < start then
    t
  else
    insertRange (start + 1, stop, insert (start, t))

val t1 = insertRange (0, 10, Empty)
val t2 = insertRange (20, 30, t1)
val t3 = insertRange (30, 100, t2)

fun notb (x : bool) : bool =
  if x then false else true

fun check (x : int, present : bool) : unit =
  val r = mem (x, t3);
  if (r && present) || (notb (r) && notb (present)) then
    print_string ("OK\n")
  else
    print_string ("KO\n")

val test =
  check (5, true);
  check (15, false);
  check (42, true);
  check (73, true);
  check (1023, false)

OUTPUT: 
OK
OK
OK
OK
OK
EXPECTED: 
OK
OK
OK
OK
OK
--------------------------------------------------------
[ OK ]   bstlarge.hopix

INPUT:
type bst = Leaf (int) | Node (bst, int, bst) | Empty

fun mem (x : int, t : bst) : bool =
  t ? {
  | Empty =>
    false
  | Leaf (y : int) =>
    x = y
  | Node (left : bst, y : int, right : bst) =>
    x = y || (if x < y then mem (x, left) else mem (x, right))
}

fun insert (x : int, t : bst) : bst =
  t ? {
  | Empty => Leaf (x)
  | Leaf (y : int) =>
    if x = y then t
    else if x < y then Node (Leaf (x), y, Empty)
    else Node (Leaf (y), x, Empty)
  | Node (left : bst, y : int, right : bst) =>
    if x = y then t
    else if x < y then Node (insert (x, left), y, right)
    else Node (left, y, insert (x, right))
  }

fun insertRange (start : int, stop : int, t : bst) : bst =
  if stop < start then
    t
  else
    insertRange (start + 1, stop, insert (start, t))

val t1 = insertRange (0, 10, Empty)
val t2 = insertRange (20, 30, t1)
val t3 = insertRange (30, 1000, t2)

fun notb (x : bool) : bool =
  if x then false else true

fun check (x : int, present : bool) : unit =
  val r = mem (x, t3);
  if (r && present) || (notb (r) && notb (present)) then
    print_string ("OK\n")
  else
    print_string ("KO\n")

val test =
  check (5, true);
  check (15, false);
  check (42, true);
  check (73, true);
  check (1023, false)

OUTPUT: 
OK
OK
OK
OK
OK
EXPECTED: 
OK
OK
OK
OK
OK
--------------------------------------------------------
[ OK ]   case.hopix

INPUT:
type t = A | B

val test1 : int = A ? { A => 0 | B => 1 }

fun f (x : t) : int = x ? { A => 0 | B => 1 }

val test2 : int = f (A)

val show = print_int (test1); print_string (" "); print_int (test2); print_string ("\n")
OUTPUT: 
0 0
EXPECTED: 
0 0
--------------------------------------------------------
[ OK ]   charpatterns.hopix

INPUT:
fun f (x : char) : int =
  x ? { 'a' => 1 | 'b' => 0 | (_ : char) => -1 }

fun check (x : int, expected : int) : unit =
  print_int (x);
  if x = expected then print_string (" OK\n") else print_string (" KO\n")

val test =
  check (f ('a'), 1);
  check (f ('b'), 0);
  check (f ('z'), -1)
OUTPUT: 
1 OK
0 OK
-1 OK
EXPECTED: 
1 OK
0 OK
-1 OK
--------------------------------------------------------
[ KO ]   -->  circular.hopix

INPUT:
type ilist = Node (int, cell (ilist ())) | Nil

val alt = ref (Nil)

fun hd (l : ilist) : int =
  l ? Node (x : int, _ : cell (ilist)) => x

fun tl (l : ilist) : ilist =
  l ? Node (_ : int, xs : cell (ilist)) => !xs

fun nth (n : int, l : ilist) : int =
  if n = 0 then hd (l) else nth (n - 1, tl (l))

val test =
  alt := Node (1, ref (Node (2, alt)));
  print_int (nth (0, !alt)); print_string ("\n");
  print_int (nth (1, !alt)); print_string ("\n");
  print_int (nth (2, !alt)); print_string ("\n");
  print_int (nth (500000, !alt)); print_string ("\n")

OUTPUT: 
Global Error (during parsing)
  Syntax error.
EXPECTED: 
1
2
1
1
--------------------------------------------------------
[ OK ]   deep.hopix

INPUT:
type t = A (t) | E | B (t, t)

fun f (x : t) : int =
  x ? { A (A (A (A (A (B (E, x : t)))))) => 0 | (_ : t) => 1 }

val test =
  print_int (f (A (E))); print_string ("\n");
  print_int (f (A (A (A (A (A (B (E, A (E))))))))); print_string ("\n")

OUTPUT: 
1
0
EXPECTED: 
1
0
--------------------------------------------------------
[ OK ]   external.hopix

INPUT:
fun p (x : int, y : int) : int = x * y - x + y

val x : int = p (0, 1)

val test = print_int (x); print_string ("\n")
OUTPUT: 
1
EXPECTED: 
1
--------------------------------------------------------
[ OK ]   id.hopix

INPUT:
val id = \['a](x : 'a) => (x : 'a)

val test = print_string ("Identity defined!\n")
OUTPUT: 
Identity defined!
EXPECTED: 
Identity defined!
--------------------------------------------------------
[ OK ]   idapp.hopix

INPUT:
val zero = (\['a](x : 'a) => (x : 'a))[int](0)

val test = print_int (zero); print_string ("\n")

OUTPUT: 
0
EXPECTED: 
0
--------------------------------------------------------
[ OK ]   if.hopix

INPUT:
val x : int =
  if true then 0 else 1

val test = print_int (x); print_string ("\n")
OUTPUT: 
0
EXPECTED: 
0
--------------------------------------------------------
[ OK ]   if1.hopix

INPUT:
val test : string =
  if true then "string" else "gnirst"

val show = print_string (test); print_string ("\n")
OUTPUT: 
string
EXPECTED: 
string
--------------------------------------------------------
[ OK ]   if2.hopix

INPUT:
val test : int =
  if true then 0 else if false then 1 else 2

val show = print_int (test); print_string ("\n")
OUTPUT: 
0
EXPECTED: 
0
--------------------------------------------------------
[ OK ]   if3.hopix

INPUT:
val x = 1

val test : int =
  if x = 0 then 0
  else if x = 1 then 1
  else if x > 0 then 2
  else if x < 0 then 3
  else if x <= 0 then 4
  else if x >= 0 then 5
  else if x = 0 && x > 0 then 6
  else 33

val test = print_int (test); print_string ("\n")
OUTPUT: 
1
EXPECTED: 
1
--------------------------------------------------------
[ OK ]   if4.hopix

INPUT:
val x = 3
val test : unit =
  if x = 0 then nothing else print_int (x); print_string ("\n")


OUTPUT: 
3
EXPECTED: 
3
--------------------------------------------------------
[ OK ]   int.hopix

INPUT:
val x = 42

val test = print_int (x); print_string ("\n")
OUTPUT: 
42
EXPECTED: 
42
--------------------------------------------------------
[ OK ]   intpatterns.hopix

INPUT:
fun f (x : int) : int =
  x ? { 0 => 1 | 1 => 0 | (_ : int) => -1 }

fun check (x : int, expected : int) : unit =
  print_int (x);
  if x = expected then print_string (" OK\n") else print_string (" KO\n")

val test =
  check (f (0), 1);
  check (f (1), 0);
  check (f (42), -1)
OUTPUT: 
1 OK
0 OK
-1 OK
EXPECTED: 
1 OK
0 OK
-1 OK
--------------------------------------------------------
[ OK ]   litpatterns.hopix

INPUT:
val x : int = 3 ? { 3 => 0 | (_ : int) => 1 }

val test = print_int (x); print_string ("\n")
OUTPUT: 
0
EXPECTED: 
0
--------------------------------------------------------
[ OK ]   litpatterns2.hopix

INPUT:
val x : int = "Darth" ? { "Yoda" => 0 | "Luke" => 1 | (_ : string) => 2 }

val test = print_int (x); print_string ("\n")
OUTPUT: 
2
EXPECTED: 
2
--------------------------------------------------------
[ OK ]   litpatterns3.hopix

INPUT:
val x : int = 'a' ? { 'b' => 0 | 'c' => 1 | (_ : char) => 2 }

val test = print_int (x); print_string ("\n")
OUTPUT: 
2
EXPECTED: 
2
--------------------------------------------------------
[ OK ]   local.hopix

INPUT:
val test : int =
  val x : int = 3;
  val z : int -> int = \(x : int) => x + 1;
  val u : int = z (x);
  u

val show = print_int (test); print_string ("\n")

OUTPUT: 
4
EXPECTED: 
4
--------------------------------------------------------
[ OK ]   local1.hopix

INPUT:
val test : int =
  val x : int = (
    val z : int -> int = \(x : int) => x + 1;
    val u : int = z (3);
    u
  );
  x

val show = print_int (test); print_string ("\n")
OUTPUT: 
4
EXPECTED: 
4
--------------------------------------------------------
[ OK ]   memory.hopix

INPUT:
val r : cell (int) = ref (0)

val test = print_string ("Make string works!\n")
OUTPUT: 
Make string works!
EXPECTED: 
Make string works!
--------------------------------------------------------
[ OK ]   memory1.hopix

INPUT:
val r : cell (int) = ref (0)

val write : unit =
  r := 42

val test = print_string ("Write is done!\n")
OUTPUT: 
Write is done!
EXPECTED: 
Write is done!
--------------------------------------------------------
[ OK ]   memory2.hopix

INPUT:
val r : cell (int) = ref (0)

val write : unit =
  r := 42

val read : int =
  !r

val test = print_int (read); print_string ("\n")
OUTPUT: 
42
EXPECTED: 
42
--------------------------------------------------------
[ OK ]   mergesort.hopix

INPUT:
type ilist = Nil | Cons (int, ilist)

fun merge (a : ilist, b : ilist) : ilist =
  a ? {
  | Nil => b
  | Cons (x : int, xs : ilist) =>
    b ? {
      Nil => a
    | Cons (y : int, ys : ilist) =>
      if x <= y then Cons (x, merge (xs, b)) else Cons (y, merge (a, ys))
    }
  }

type lpair = Pair (ilist, ilist)

fun split (a : ilist) : lpair =
  a ? {
  | Nil =>
    Pair (Nil, Nil)
  | Cons (x : int, Nil) =>
    Pair (a, Nil)
  | Cons (x : int, Cons (y : int, ys : ilist)) =>
    split (ys) ? Pair (left : ilist, right : ilist) => Pair (Cons (x, left), Cons (y, right))
  }

fun sort (a : ilist) : ilist =
  a ? {
  | Nil => a
  | Cons (x : int, Nil) => a
  | (a : ilist) => split (a) ? Pair (l : ilist, r : ilist) => merge (sort (l), sort (r))
  }

fun issorted (a : ilist) : bool =
  a ? {
  | Nil
  | Cons (_ : int, Nil) => true
  | Cons (x : int, Cons (y : int, ys : ilist) & (b : ilist)) => (x <= y) && issorted (b)
  }

fun altrange (start : int, stop : int) : ilist =
  if start > stop then Nil else
  Cons (start, Cons (0 - start, Cons (stop - start, Cons (start - stop, altrange (start + 1, stop)))))

fun check (start : int, stop : int) : unit =
  if issorted (sort (altrange (start, stop))) then
    print_string ("OK\n")
  else
    print_string ("KO\n")

val test =
  check (0, 10);
  check (0, 100);
  check (0, 1000)

OUTPUT: 
OK
OK
OK
EXPECTED: 
OK
OK
OK
--------------------------------------------------------
[ OK ]   multipatterns.hopix

INPUT:
type t = A | B
type u = S (t) | T (int)

val x : int = S (A) ? {
| S (A | B)  => 0
| (_ : u) => 1
}

val test = print_int (x); print_string ("\n")
OUTPUT: 
0
EXPECTED: 
0
--------------------------------------------------------
[ OK ]   noarg.hopix

INPUT:
fun f (x : unit) : unit = nothing

val test : unit = f (nothing)

val end = print_string ("Nothing!\n")

OUTPUT: 
Nothing!
EXPECTED: 
Nothing!
--------------------------------------------------------
[ KO ]   -->  option.hopix

INPUT:
type option ('a) =
| None
| Some ('a)

val none = None [int]

fun some (x : int) : option (int) = Some[int] (x)

fun unSome (o : option (int), default: int) : int =
  o ? {
  | (None : option (int)) => default
  | Some (x : int) => x
  }

val test1 = print_int (unSome (some (42), 0)); print_string ("\n")

val test2 = print_int (unSome (none, 0)); print_string ("\n")
OUTPUT: 
Line 11, characters 12-24: Error (typechecking)
  Type error:
Expected:
  option('a)
Given:
  option(int)

EXPECTED: 
42
0
--------------------------------------------------------
[ OK ]   orpatterns.hopix

INPUT:
type t = A (int) | B (int) | C

val test1 : int = A (0) ? {
| A (x : int) | B (x : int) => x
| C => 1
}

val result = print_int (test1); print_string ("\n")

OUTPUT: 
0
EXPECTED: 
0
--------------------------------------------------------
[ OK ]   orpatterns2.hopix

INPUT:
type u = A (int, int) | B (int) | C

val test1 : int = A (0, 2) ? {
| A (x : int, (_ : int)) | B (x : int) => x
| C => 1
}

val test = print_int (test1); print_string ("\n")

OUTPUT: 
0
EXPECTED: 
0
--------------------------------------------------------
[ OK ]   patterns.hopix

INPUT:
type t = A (t) | B (t, t) | C (t, t, t, t) | D (t, int, t) | E

fun f (x : t) : int =
  x ? {
  | A (E) => 0
  | A (A (E)) => 1
  | A (B (E, E)) => 2
  | A (B (A (E), E)) => 3
  | B (A (E), B (E, E)) => 4
  | C (E, E, A (B (E, E)), E) => 5
  | C (D (E, (x : int), E), E, E, E) => x
  | (_ : t) => -1
  }

fun check (x : t, expected : int) : unit =
  if f (x) = expected then print_string ("OK\n") else print_string ("KO\n")

val test =
  check (E, -1);
  check (A (E), 0);
  check (A (A (E)), 1);
  check (A (B (E, E)), 2);
  check (A (B (A (E), E)), 3);
  check (B (A (E), B (E, E)), 4);
  check (C (E, E, A (B (E, E)), E), 5);
  check (C (D (E, 42, E), E, E, E), 42);
  check (C (E, E, E, E), -1)
OUTPUT: 
OK
OK
OK
OK
OK
OK
OK
OK
OK
EXPECTED: 
OK
OK
OK
OK
OK
OK
OK
OK
OK
--------------------------------------------------------
[ OK ]   polymorphism.hopix

INPUT:
fun id ['a] (x : 'a) : 'a = x

val y : int = id [int] (42)

val test = print_int (y); print_string ("\n")
OUTPUT: 
42
EXPECTED: 
42
--------------------------------------------------------
[ OK ]   polymorphism2.hopix

INPUT:
fun apply ['a, 'b] (f : 'a -> 'b, x : 'a) : 'b = f (x)

val y : int = apply [int, int](\(x : int) => x, 0)

val test = print_int (y); print_string ("\n")
OUTPUT: 
0
EXPECTED: 
0
--------------------------------------------------------
[ OK ]   polymorphism3.hopix

INPUT:
type t ('a) = K ('a)

fun open ['a] (x : t ('a)) : 'a =
  x ? K (y : 'a) => y

val test : unit = print_int (open[int] (K[int] (1))); print_string ("\n")
OUTPUT: 
1
EXPECTED: 
1
--------------------------------------------------------
[ KO ]   -->  polymorphism4.hopix

INPUT:
type t ('a) = K ('a)

fun map ['a, 'b] (x : t ('a), f : 'a -> 'b) : t('b) =
  x ? K (y : 'a) => K ['b] (f (y))

fun id ['a] (x : t ('a)) : t ('a) =
  map['a, 'a] (x, \(y : 'a) => y)

val test = id[int] (K[int] (33)) ? K (x : int) => print_int (x); print_string ("\n")
OUTPUT: 
Line 9, characters 38-45: Error (typechecking)
  Type error:
Expected:
  int
Given:
  'a

EXPECTED: 
33
--------------------------------------------------------
[ KO ]   -->  polymorphism5.hopix

INPUT:
type t ('a, 'b) = K ('a -> 'b)

fun compose ['a, 'b, 'c] (x : t ('a, 'b), f : 'b -> 'c) : t('a, 'c) =
  x ? K (g : 'a -> 'b) => K ['a, 'c] (\(x : 'a) => f (g (x)))

val tid : t (int, int)   = K[int, int] (\(x : int) => x)

val tsucc : t (int, int) = compose[int, int, int] (tid, \(x : int) => x + 1)

val tdble : t (int, int) = compose[int, int, int] (tsucc, \(x : int) => x * 2)

val test =
   tdble ? K (f : int -> int) => print_int (f (3)); print_string ("\n")

OUTPUT: 
Line 13, characters 14-28: Error (typechecking)
  Type error:
Expected:
  int -> int
Given:
  'a -> 'b

EXPECTED: 
8
--------------------------------------------------------
[ OK ]   ref.hopix

INPUT:
fun fact (n : int) : int =
  val r = ref (1);
  val i = ref (1);
  while (!i <= n) {
     r := !i * !r;
     i := !i + 1
  };
  !r

fun check (n : int, expected : int) : unit =
  if fact (n) = expected then print_string ("OK\n") else print_string ("KO\n")

val test =
  check (0, 1);
  check (3, 6);
  check (5, 120)
OUTPUT: 
OK
OK
OK
EXPECTED: 
OK
OK
OK
--------------------------------------------------------
[ OK ]   restrictpoly.hopix

INPUT:
fun id['a] (x: 'a) : 'a = x

fun twice (f : int -> int) : int -> int =
    \(x : int) => f (f (x))

val zero = twice (\(x : int) => id[int] (x)) (0)

val test = print_int (zero); print_string ("\n")
OUTPUT: 
0
EXPECTED: 
0
--------------------------------------------------------
[ KO ]   -->  slam.hopix

INPUT:
type list ('a) =
| Nil
| Cons ('a, list ('a))

fun nil['a] (x : unit) : list ('a) = Nil['a]

fun cons['a] (x : 'a, xs : list('a)) : list ('a) = Cons['a] (x, xs)

fun map['a, 'b] (f : 'a -> 'b, l : list ('a)) : list ('b) =
  l ? {
  | (Nil : list ('a)) =>
    nil['b] (nothing)
  | Cons (x : 'a, xs : list ('a)) =>
    cons['b] (f (x), map['a, 'b] (f, xs))
 }

fun append['a] (l1 : list ('a), l2 : list ('a)) : list ('a) =
  l1 ? {
  | (Nil : list ('a)) =>
    l2
  | Cons (x : 'a, xs : list ('a)) =>
    cons['a] (x, append['a] (xs, l2))
  }

fun flatten['a] (l : list (list ('a))) : list ('a) =
  l ? {
  | (Nil : list (list ('a))) =>
    nil['a] (nothing)
  | Cons (l : list ('a), ls : list (list ('a))) =>
    append['a] (l, flatten['a] (ls))
  }

fun return['a] (x : 'a) : list ('a)  = cons['a] (x, nil['a] (nothing))
fun bind['a, 'b] (m : list ('a), f : 'a -> list ('b)) : list ('b) = 
  flatten['b] (map['a, list ('b)] (f, m))

fun choice['a] (a : 'a, b : 'a) : list ('a) = cons['a] (a, cons['a] (b, nil['a] (nothing)))

fun bits (n : int) : list (list (int)) =
  if n = 0 then return[list (int)] (nil[int] (nothing)) else
    bind[int, list (int)] (choice[int] (0, 1), \(b : int) =>
      bind[list (int), list (int)] (bits (n - 1), \(bs : list (int)) =>
	return[list (int)] (cons[int] (b, bs))
     )
    )

val all_bytes : list (list (int)) = bits (8)

fun iter['a] (f : 'a -> unit, l : list ('a)) : unit =
  l ? {
  | (Nil : list ('a)) =>
    nothing
  | Cons (x : 'a, xs : list ('a)) => (
     f (x);
     iter['a] (f, xs)
    )
  }

fun print_bits (bs : list (int)) : unit =
  print_string ("[");
  fun aux (bs : list (int)) : unit =
    bs ? {
    | (Nil : list (int)) => print_string ("")
    | Cons (b : int, bs : list (int)) => (print_int (b); print_string (";"); aux (bs))
    };
  aux (bs);
  print_string ("]")

val main1 =
  iter[list (int)] (\(b : list (int)) => (print_bits (b); print_string ("\n")),
	all_bytes)

val all_word12 : list (list (int)) = bits (12)

fun fold['a, 'b] (f : 'b * 'a -> 'b, accu : 'b, l : list ('a)) : 'b = l? {
  | (Nil : list ('a)) => accu
  | Cons (x : 'a, xs : list ('a)) => fold['a, 'b] (f, f (accu, x), xs)
}

fun ones (b : list (int)) : int =
  fold[int, int] ((\(a : int, b : int) => a + b), 0, b)

val main2 =
    val count = ref (0);
    iter[list (int)] (\(b : list (int)) => count := !count + ones (b), all_word12);
    print_int (!count);
    print_string ("\n")

OUTPUT: 
Line 27, characters 11-27: Error (typechecking)
  Type error:
Expected:
  list('a)
Given:
  list(list('a))

EXPECTED: 
[0;0;0;0;0;0;0;0;]
[0;0;0;0;0;0;0;1;]
[0;0;0;0;0;0;1;0;]
[0;0;0;0;0;0;1;1;]
[0;0;0;0;0;1;0;0;]
[0;0;0;0;0;1;0;1;]
[0;0;0;0;0;1;1;0;]
[0;0;0;0;0;1;1;1;]
[0;0;0;0;1;0;0;0;]
[0;0;0;0;1;0;0;1;]
[0;0;0;0;1;0;1;0;]
[0;0;0;0;1;0;1;1;]
[0;0;0;0;1;1;0;0;]
[0;0;0;0;1;1;0;1;]
[0;0;0;0;1;1;1;0;]
[0;0;0;0;1;1;1;1;]
[0;0;0;1;0;0;0;0;]
[0;0;0;1;0;0;0;1;]
[0;0;0;1;0;0;1;0;]
[0;0;0;1;0;0;1;1;]
[0;0;0;1;0;1;0;0;]
[0;0;0;1;0;1;0;1;]
[0;0;0;1;0;1;1;0;]
[0;0;0;1;0;1;1;1;]
[0;0;0;1;1;0;0;0;]
[0;0;0;1;1;0;0;1;]
[0;0;0;1;1;0;1;0;]
[0;0;0;1;1;0;1;1;]
[0;0;0;1;1;1;0;0;]
[0;0;0;1;1;1;0;1;]
[0;0;0;1;1;1;1;0;]
[0;0;0;1;1;1;1;1;]
[0;0;1;0;0;0;0;0;]
[0;0;1;0;0;0;0;1;]
[0;0;1;0;0;0;1;0;]
[0;0;1;0;0;0;1;1;]
[0;0;1;0;0;1;0;0;]
[0;0;1;0;0;1;0;1;]
[0;0;1;0;0;1;1;0;]
[0;0;1;0;0;1;1;1;]
[0;0;1;0;1;0;0;0;]
[0;0;1;0;1;0;0;1;]
[0;0;1;0;1;0;1;0;]
[0;0;1;0;1;0;1;1;]
[0;0;1;0;1;1;0;0;]
[0;0;1;0;1;1;0;1;]
[0;0;1;0;1;1;1;0;]
[0;0;1;0;1;1;1;1;]
[0;0;1;1;0;0;0;0;]
[0;0;1;1;0;0;0;1;]
[0;0;1;1;0;0;1;0;]
[0;0;1;1;0;0;1;1;]
[0;0;1;1;0;1;0;0;]
[0;0;1;1;0;1;0;1;]
[0;0;1;1;0;1;1;0;]
[0;0;1;1;0;1;1;1;]
[0;0;1;1;1;0;0;0;]
[0;0;1;1;1;0;0;1;]
[0;0;1;1;1;0;1;0;]
[0;0;1;1;1;0;1;1;]
[0;0;1;1;1;1;0;0;]
[0;0;1;1;1;1;0;1;]
[0;0;1;1;1;1;1;0;]
[0;0;1;1;1;1;1;1;]
[0;1;0;0;0;0;0;0;]
[0;1;0;0;0;0;0;1;]
[0;1;0;0;0;0;1;0;]
[0;1;0;0;0;0;1;1;]
[0;1;0;0;0;1;0;0;]
[0;1;0;0;0;1;0;1;]
[0;1;0;0;0;1;1;0;]
[0;1;0;0;0;1;1;1;]
[0;1;0;0;1;0;0;0;]
[0;1;0;0;1;0;0;1;]
[0;1;0;0;1;0;1;0;]
[0;1;0;0;1;0;1;1;]
[0;1;0;0;1;1;0;0;]
[0;1;0;0;1;1;0;1;]
[0;1;0;0;1;1;1;0;]
[0;1;0;0;1;1;1;1;]
[0;1;0;1;0;0;0;0;]
[0;1;0;1;0;0;0;1;]
[0;1;0;1;0;0;1;0;]
[0;1;0;1;0;0;1;1;]
[0;1;0;1;0;1;0;0;]
[0;1;0;1;0;1;0;1;]
[0;1;0;1;0;1;1;0;]
[0;1;0;1;0;1;1;1;]
[0;1;0;1;1;0;0;0;]
[0;1;0;1;1;0;0;1;]
[0;1;0;1;1;0;1;0;]
[0;1;0;1;1;0;1;1;]
[0;1;0;1;1;1;0;0;]
[0;1;0;1;1;1;0;1;]
[0;1;0;1;1;1;1;0;]
[0;1;0;1;1;1;1;1;]
[0;1;1;0;0;0;0;0;]
[0;1;1;0;0;0;0;1;]
[0;1;1;0;0;0;1;0;]
[0;1;1;0;0;0;1;1;]
[0;1;1;0;0;1;0;0;]
[0;1;1;0;0;1;0;1;]
[0;1;1;0;0;1;1;0;]
[0;1;1;0;0;1;1;1;]
[0;1;1;0;1;0;0;0;]
[0;1;1;0;1;0;0;1;]
[0;1;1;0;1;0;1;0;]
[0;1;1;0;1;0;1;1;]
[0;1;1;0;1;1;0;0;]
[0;1;1;0;1;1;0;1;]
[0;1;1;0;1;1;1;0;]
[0;1;1;0;1;1;1;1;]
[0;1;1;1;0;0;0;0;]
[0;1;1;1;0;0;0;1;]
[0;1;1;1;0;0;1;0;]
[0;1;1;1;0;0;1;1;]
[0;1;1;1;0;1;0;0;]
[0;1;1;1;0;1;0;1;]
[0;1;1;1;0;1;1;0;]
[0;1;1;1;0;1;1;1;]
[0;1;1;1;1;0;0;0;]
[0;1;1;1;1;0;0;1;]
[0;1;1;1;1;0;1;0;]
[0;1;1;1;1;0;1;1;]
[0;1;1;1;1;1;0;0;]
[0;1;1;1;1;1;0;1;]
[0;1;1;1;1;1;1;0;]
[0;1;1;1;1;1;1;1;]
[1;0;0;0;0;0;0;0;]
[1;0;0;0;0;0;0;1;]
[1;0;0;0;0;0;1;0;]
[1;0;0;0;0;0;1;1;]
[1;0;0;0;0;1;0;0;]
[1;0;0;0;0;1;0;1;]
[1;0;0;0;0;1;1;0;]
[1;0;0;0;0;1;1;1;]
[1;0;0;0;1;0;0;0;]
[1;0;0;0;1;0;0;1;]
[1;0;0;0;1;0;1;0;]
[1;0;0;0;1;0;1;1;]
[1;0;0;0;1;1;0;0;]
[1;0;0;0;1;1;0;1;]
[1;0;0;0;1;1;1;0;]
[1;0;0;0;1;1;1;1;]
[1;0;0;1;0;0;0;0;]
[1;0;0;1;0;0;0;1;]
[1;0;0;1;0;0;1;0;]
[1;0;0;1;0;0;1;1;]
[1;0;0;1;0;1;0;0;]
[1;0;0;1;0;1;0;1;]
[1;0;0;1;0;1;1;0;]
[1;0;0;1;0;1;1;1;]
[1;0;0;1;1;0;0;0;]
[1;0;0;1;1;0;0;1;]
[1;0;0;1;1;0;1;0;]
[1;0;0;1;1;0;1;1;]
[1;0;0;1;1;1;0;0;]
[1;0;0;1;1;1;0;1;]
[1;0;0;1;1;1;1;0;]
[1;0;0;1;1;1;1;1;]
[1;0;1;0;0;0;0;0;]
[1;0;1;0;0;0;0;1;]
[1;0;1;0;0;0;1;0;]
[1;0;1;0;0;0;1;1;]
[1;0;1;0;0;1;0;0;]
[1;0;1;0;0;1;0;1;]
[1;0;1;0;0;1;1;0;]
[1;0;1;0;0;1;1;1;]
[1;0;1;0;1;0;0;0;]
[1;0;1;0;1;0;0;1;]
[1;0;1;0;1;0;1;0;]
[1;0;1;0;1;0;1;1;]
[1;0;1;0;1;1;0;0;]
[1;0;1;0;1;1;0;1;]
[1;0;1;0;1;1;1;0;]
[1;0;1;0;1;1;1;1;]
[1;0;1;1;0;0;0;0;]
[1;0;1;1;0;0;0;1;]
[1;0;1;1;0;0;1;0;]
[1;0;1;1;0;0;1;1;]
[1;0;1;1;0;1;0;0;]
[1;0;1;1;0;1;0;1;]
[1;0;1;1;0;1;1;0;]
[1;0;1;1;0;1;1;1;]
[1;0;1;1;1;0;0;0;]
[1;0;1;1;1;0;0;1;]
[1;0;1;1;1;0;1;0;]
[1;0;1;1;1;0;1;1;]
[1;0;1;1;1;1;0;0;]
[1;0;1;1;1;1;0;1;]
[1;0;1;1;1;1;1;0;]
[1;0;1;1;1;1;1;1;]
[1;1;0;0;0;0;0;0;]
[1;1;0;0;0;0;0;1;]
[1;1;0;0;0;0;1;0;]
[1;1;0;0;0;0;1;1;]
[1;1;0;0;0;1;0;0;]
[1;1;0;0;0;1;0;1;]
[1;1;0;0;0;1;1;0;]
[1;1;0;0;0;1;1;1;]
[1;1;0;0;1;0;0;0;]
[1;1;0;0;1;0;0;1;]
[1;1;0;0;1;0;1;0;]
[1;1;0;0;1;0;1;1;]
[1;1;0;0;1;1;0;0;]
[1;1;0;0;1;1;0;1;]
[1;1;0;0;1;1;1;0;]
[1;1;0;0;1;1;1;1;]
[1;1;0;1;0;0;0;0;]
[1;1;0;1;0;0;0;1;]
[1;1;0;1;0;0;1;0;]
[1;1;0;1;0;0;1;1;]
[1;1;0;1;0;1;0;0;]
[1;1;0;1;0;1;0;1;]
[1;1;0;1;0;1;1;0;]
[1;1;0;1;0;1;1;1;]
[1;1;0;1;1;0;0;0;]
[1;1;0;1;1;0;0;1;]
[1;1;0;1;1;0;1;0;]
[1;1;0;1;1;0;1;1;]
[1;1;0;1;1;1;0;0;]
[1;1;0;1;1;1;0;1;]
[1;1;0;1;1;1;1;0;]
[1;1;0;1;1;1;1;1;]
[1;1;1;0;0;0;0;0;]
[1;1;1;0;0;0;0;1;]
[1;1;1;0;0;0;1;0;]
[1;1;1;0;0;0;1;1;]
[1;1;1;0;0;1;0;0;]
[1;1;1;0;0;1;0;1;]
[1;1;1;0;0;1;1;0;]
[1;1;1;0;0;1;1;1;]
[1;1;1;0;1;0;0;0;]
[1;1;1;0;1;0;0;1;]
[1;1;1;0;1;0;1;0;]
[1;1;1;0;1;0;1;1;]
[1;1;1;0;1;1;0;0;]
[1;1;1;0;1;1;0;1;]
[1;1;1;0;1;1;1;0;]
[1;1;1;0;1;1;1;1;]
[1;1;1;1;0;0;0;0;]
[1;1;1;1;0;0;0;1;]
[1;1;1;1;0;0;1;0;]
[1;1;1;1;0;0;1;1;]
[1;1;1;1;0;1;0;0;]
[1;1;1;1;0;1;0;1;]
[1;1;1;1;0;1;1;0;]
[1;1;1;1;0;1;1;1;]
[1;1;1;1;1;0;0;0;]
[1;1;1;1;1;0;0;1;]
[1;1;1;1;1;0;1;0;]
[1;1;1;1;1;0;1;1;]
[1;1;1;1;1;1;0;0;]
[1;1;1;1;1;1;0;1;]
[1;1;1;1;1;1;1;0;]
[1;1;1;1;1;1;1;1;]
24576
--------------------------------------------------------
[ OK ]   string.hopix

INPUT:
val s = "foobar"
val test = print_string (s); print_string ("\n")
OUTPUT: 
foobar
EXPECTED: 
foobar
--------------------------------------------------------
[ OK ]   stringpatterns.hopix

INPUT:
fun f (x : string) : int =
  x ? { "luke" => 1 | "bulma" => 0 | "zelda" => 2 | (_ : string) => -1 }

fun check (x : int, expected : int) : unit =
  print_int (x);
  if x = expected then print_string (" OK\n") else print_string (" KO\n")

val test =
  check (f ("zelda"), 2);
  check (f ("bulma"), 0);
  check (f ("luke"), 1);
  check (f ("anakin"), -1)
OUTPUT: 
2 OK
0 OK
1 OK
-1 OK
EXPECTED: 
2 OK
0 OK
1 OK
-1 OK
--------------------------------------------------------
GOOD: 43 / 48

BAD:  0 / 0
make[1]: Leaving directory '/home/opam/source/flap/tests-m4/hopix/compiler/good'
--------------------------------------------------------
Global results:
BAD:   0 / 0
GOOD:  43 / 48
--------------------------------------------------------
make: Leaving directory '/home/opam/source/flap/tests-m4'
